networks:
  bbsvx-net:
    driver: bridge
  loki-net:
    external: true

services:
  bbsvx_root:
      hostname: bbsvx_root
      image: bbsvx:latest
      ports:
        - "10300"
        - "8085"
        - "9090"
      environment:
        - DOCKER_COMPOSE=true
        - ERLANG_COOKIE=bbsvx
      networks:
        - bbsvx-net
      logging:
        driver: loki
        options:
          loki-url: "http://127.0.0.1:3100/loki/api/v1/push"
          mode: non-blocking
          max-buffer-size: 4m
          loki-retries: "3"
      volumes:
        - ./docker/logs:/logs
      labels:
        - "prometheus-job=true"
        - "logs_prom=true"
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
  bbsvx_client:
    image: bbsvx:latest
    ports:
      - "10300"
      - "8085"
      - "9090"
    environment:
      - DOCKER_COMPOSE=true
      - ERLANG_COOKIE=bbsvx
    networks:
      - bbsvx-net
    logging:
        driver: loki
        options:
          loki-url: "http://127.0.0.1:3100/loki/api/v1/push"
          mode: non-blocking
          max-buffer-size: 4m
          loki-retries: "3"
    volumes:
      - ./docker/logs:/logs
    depends_on:
      - bbsvx_root
    labels:
      - "prometheus-job=true"
      - "logs_prom=true"

  prometheus:
    image: prom/prometheus
    hostname: prometheus
    volumes:
      - ./docker/prometheus/etc/:/etc/prometheus/
      - prometheus_data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock

    user: root
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--log.level=error'
    ports:
      - 9090:9090
    links:
      - alertmanager:alertmanager 
    networks:
      - bbsvx-net
    restart: always


  alertmanager:
    image: prom/alertmanager
    hostname: alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./docker/alertmanager/:/etc/alertmanager/
    networks:
      - bbsvx-net
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}
  loki:
    image: grafana/loki:latest
    hostname: loki_collector
    ports:
      - "3100:3100"
    command: 
      - '-config.file=/etc/loki/local-config.yaml'
    volumes:
      - ./docker/loki/conf:/etc/loki
    networks:
      - bbsvx-net
  
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    hostname: tempo_collector
    volumes:
      - ./docker/tempo/conf/tempo.yaml:/etc/tempo.yaml
      - ./docker/tempo/data:/tmp/tempo
    networks:
      - bbsvx-net
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
      - "9411:9411"   # zipkin
  # otel:
  #   image: otel/opentelemetry-collector:latest
  #   command: ["--config=/conf/otel-collector-config.yaml"]
  #   hostname: otel_collector
  #   privileged: true
  #   networks:
  #     - bbsvx-net
  #   ports:
  #     - 4317
  #     - 4318
  #     - 55679
  #   volumes:
  #     - ./docker/otel/otel-collector-config.yaml:/conf/otel-collector-config.yaml
  grafana:
    image: grafana/grafana
    user: "104"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning/
    env_file:
      - ./docker/grafana/config.monitoring
    networks:
      - bbsvx-net
    restart: always
volumes:
  grafana_data: {}
  prometheus_data: {}
  promtail_data: {}