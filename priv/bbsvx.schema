%%-*- mode: erlang -*-

%% User configuration %%

%% Config file path support - for user-friendly development
%% Default search order:
%% 1. Command line specified: --config /path/to/config
%% 2. Environment variable: BBSVX_CONFIG_FILE
%% 3. User space: ~/.bbsvx/bbsvx.conf
%% 4. Current directory: ./bbsvx.conf
%% 5. Release default: etc/bbsvx.conf

%% Application Boot Configuration
{mapping, "boot", "bbsvx.boot", [
  {default, "root"},
  {datatype, string},
  {env, "BBSVX_BOOT"},
  {comment, "Boot mode: 'auto' (restarts only), 'root' (new cluster, fresh data only), 'join <host> <port>' (join existing). Can be set via BBSVX_BOOT environment variable."}
]}.

{translation, "bbsvx.boot",
 fun(Conf) ->
     Boot = cuttlefish:conf_get("boot", Conf),
     case Boot of
         "auto" ->
             %% Auto-detect only works for restarts - check if node has been initialized
             DataDir = cuttlefish:conf_get("paths.data_dir", Conf, "./data"),
             SchemaFile = filename:join([DataDir, "schema.DAT"]),
             case filelib:is_file(SchemaFile) of
                 true ->
                     %% Schema exists - this is a restart, auto-join existing cluster
                     ContactNodes = cuttlefish:conf_get("network.contact_nodes", Conf, "none"),
                     case ContactNodes of
                         "none" ->
                             %% No contact nodes specified - restart as standalone
                             join;
                         _ ->
                             %% Parse contact nodes and use first one for join
                             case string:tokens(ContactNodes, ",") of
                                 [FirstNode | _] ->
                                     case string:tokens(string:strip(FirstNode), ":") of
                                         [Host, Port] -> 
                                             {join, Host, list_to_integer(Port)};
                                         [Host] -> 
                                             {join, Host, 2304};
                                         _ -> 
                                             {join, "localhost", 2304}
                                     end;
                                 [] ->
                                     {join, "localhost", 2304}
                             end
                     end;
                 false ->
                     %% No schema file - this is first start, cannot auto-detect intent
                     %% User must specify 'root' or 'join host port' explicitly
                     error({invalid_config, 
                            "First start detected - 'boot = auto' requires explicit intent. "
                            "Use 'boot = root' to start new cluster or 'boot = join host port' to join existing cluster"})
             end;
         "root" ->
             %% Check if data already exists - forbid root mode on existing data
             DataDir = cuttlefish:conf_get("paths.data_dir", Conf, "./data"),
             SchemaFile = filename:join([DataDir, "schema.DAT"]),
             case filelib:is_file(SchemaFile) of
                 true ->
                     %% Data exists - cannot start in root mode
                     error({invalid_config,
                            "Cannot start in 'boot = root' mode - existing data detected in " ++ DataDir ++ ". "
                            "Use 'boot = auto' for restart or 'boot = join host port' to join cluster. "
                            "To start fresh, remove the data directory first."});
                 false ->
                     %% No existing data - root mode is allowed
                     root
             end;
         Other when is_list(Other) ->
             %% Parse "join host port" format
             case string:tokens(Other, " ") of
                 ["join", Host, Port] ->
                     {join, Host, list_to_integer(Port)};
                 ["join", Host] ->
                     {join, Host, 2304};
                 _ ->
                     error({invalid_config, 
                            "Invalid boot format: '" ++ Other ++ "'. "
                            "Use 'root' or 'join host port'"})
             end;
         Other ->
             error({invalid_config, 
                    "Invalid boot mode: '" ++ Other ++ "'. "
                    "Use 'auto', 'root', or 'join host port'"})
     end
 end}.

%% Network Configuration - Node Identity  
{mapping, "nodename", "vm_args.-name", [
  {default, "bbsvx@127.0.0.1"},
  {datatype, string},
  {comment, "Node name for distributed Erlang"}
]}.

{mapping, "distributed_cookie", "vm_args.-setcookie", [
  {default, "bbsvx"},
  {datatype, string},
  {comment, "Erlang cookie for node communication"}
]}.

{mapping, "network.p2p_port", "bbsvx.p2p_port", [
  {default, 2304},
  {datatype, integer},
  {comment, "Port for P2P network communication"}
]}.

{mapping, "network.http_port", "bbsvx.http_port", [
  {default, 8085},
  {datatype, integer},
  {comment, "Port for HTTP API server"}
]}.

{mapping, "network.contact_nodes", "bbsvx.contact_nodes", [
  {default, "none"},
  {datatype, string},
  {comment, "Comma-separated list of contact nodes for P2P network bootstrap"}
]}.

%% File System Configuration
{mapping, "paths.kb_path", "bbsvx.kb_path", [
  {default, "."},
  {datatype, string},
  {comment, "Path to knowledge base files"}
]}.

{mapping, "paths.data_dir", "bbsvx.data_dir", [
  {default, "./data"},
  {datatype, string},
  {comment, "Directory for application data storage"}
]}.

{mapping, "paths.log_dir", "bbsvx.log_dir", [
  {default, "./logs"},
  {datatype, string},
  {comment, "Directory for log files"}
]}.

%% Legacy compatibility
{mapping, "kb_path", "bbsvx.kb_path", [
  {default, "."},
  {datatype, string},
  {comment, "Legacy: use paths.kb_path instead"}
]}.

{mapping, "path", "prometheus.prometheus_http.path", [
  {default, "/metrics"},
  {datatype, string}
]}.

{mapping, "format", "prometheus.prometheus_http.format", [
  {default, auto},
  {datatype, atom}
]}.

{mapping, "port", "prometheus.prometheus_http.port", [
  {default, 10300},
  {datatype, integer}
]}.


{mapping, "span_processor", "opentelemetry.span_processor", [
  {default, batch},
  {datatype, atom}
]}.

{mapping, "traces_exporter", "opentelemetry.traces_exporter", [
  {default, otlp},
  {datatype, atom}
]}.

{mapping, "otlp_protocol", "opentelemetry_exporter.otlp_protocol", [
  {default, grpc},
  {datatype, atom}
]}.

{mapping, "otlp_endpoint", "opentelemetry_exporter.otlp_endpoint", [
  {default, "http://tempo_collector:4317"},
  {datatype, string}
]}.

{mapping, "logger_level", "kernel.logger_level", [
  {default, info},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency]}}
]}.

