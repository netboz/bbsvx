#!/bin/bash

# BBSvx Admin Script
# This script provides the clique-based CLI interface similar to riak-admin

# Get the script directory and release paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REL_DIR="$(dirname "$(dirname "$SCRIPT_DIR")")/_build/default/rel/bbsvx"
RUNNER_SCRIPT="$REL_DIR/bin/bbsvx"
NODETOOL="$REL_DIR/bin/nodetool"

# Check if we're in the source directory structure
if [[ ! -f "$RUNNER_SCRIPT" ]]; then
    # Try relative to current directory
    REL_DIR="./_build/default/rel/bbsvx"
    RUNNER_SCRIPT="$REL_DIR/bin/bbsvx"
    NODETOOL="$REL_DIR/bin/nodetool"
fi

# Check if release exists
if [[ ! -f "$RUNNER_SCRIPT" ]]; then
    echo "Error: BBSvx release not found. Please run 'rebar3 release' first."
    exit 1
fi

# Function to check if node is running
ping_node() {
    local node_name="$1"
    if [[ -z "$node_name" ]]; then
        node_name=$("$RUNNER_SCRIPT" eval "node()." | tr -d "'")
    fi
    
    "$NODETOOL" -name "$node_name" ping >/dev/null 2>&1
}

# Function to get node name from running system
get_node_name() {
    # Try to get from configuration file first
    local config_file="$REL_DIR/etc/bbsvx.conf"
    if [[ -f "$config_file" ]]; then
        local node_name=$(grep "^nodename" "$config_file" | cut -d'=' -f2 | tr -d ' ')
        if [[ -n "$node_name" ]]; then
            echo "$node_name"
            return
        fi
    fi
    
    # Try to get from running node
    local node_name=$("$RUNNER_SCRIPT" eval "node()." 2>/dev/null | grep -v "Usage:" | tr -d "'")
    if [[ -n "$node_name" && "$node_name" != *"Usage:"* ]]; then
        echo "$node_name"
        return
    fi
    
    # Final fallback
    echo "bbsvx@127.0.0.1"
}

# Function to execute clique command via the main runner script
execute_clique_command() {
    local cmd_list="[\"bbsvx-admin\""
    
    # Build command arguments as proper Erlang list
    for arg in "$@"; do
        cmd_list="$cmd_list, \"$arg\""
    done
    cmd_list="$cmd_list]"
    
    # Check if node is running by using the main runner ping
    if ! "$RUNNER_SCRIPT" ping >/dev/null 2>&1; then
        echo "Error: BBSvx node is not running."
        echo "Start the node first with: $RUNNER_SCRIPT start"
        exit 1
    fi
    
    # Execute via runner script RPC to bbsvx_console:command/1
    "$RUNNER_SCRIPT" rpc bbsvx_console command "$cmd_list"
}

# Function to show help
show_help() {
    cat << EOF
BBSvx Admin - Clique-based Administration Interface

Usage: bbsvx-admin <command> [options]

Configuration Commands:
  show [key]                  Show configuration values
  set key=value               Set configuration value
  describe key                Describe configuration option

System Commands:
  status [-v] [-j]            Show system status
                              -v: verbose output
                              -j: JSON format

Ontology Commands:
  ontology list               List all ontologies
  ontology create <name>      Create new ontology
                              -t, --type <local|shared>

Network Commands:
  ping                        Ping the node
  cluster status              Show cluster status

Examples:
  bbsvx-admin show network.p2p_port
  bbsvx-admin set network.p2p_port=3000
  bbsvx-admin status -v
  bbsvx-admin ontology list
  bbsvx-admin ontology create my_namespace --type local

Node Control:
  To start/stop the node, use the main script:
    $RUNNER_SCRIPT start
    $RUNNER_SCRIPT stop
    $RUNNER_SCRIPT console

EOF
}

# Main execution
main() {
    # Handle special cases
    case "${1:-}" in
        ""|"help"|"--help"|"-h")
            show_help
            exit 0
            ;;
        "ping")
            # Special handling for ping - check if node is up
            local node_name=$(get_node_name)
            if ping_node "$node_name"; then
                echo "pong"
            else
                echo "Node '$node_name' is not responding"
                exit 1
            fi
            exit 0
            ;;
    esac
    
    # For now, provide basic status information since clique RPC has issues
    case "${1:-}" in
        "status")
            echo "BBSvx Node Status:"
            echo "=================="
            echo "Node: $(get_node_name)"
            echo "HTTP API: http://localhost:8085"
            echo "P2P Network: port 2304"
            echo ""
            echo "Testing HTTP API connectivity:"
            if curl -s --connect-timeout 3 http://localhost:8085/spray/nodes >/dev/null 2>&1; then
                echo "✓ HTTP API is responding"
            else
                echo "✗ HTTP API is not responding"
            fi
            ;;
        "show")
            echo "Configuration values from bbsvx.conf:"
            echo "===================================="
            local config_file="$REL_DIR/etc/bbsvx.conf"
            if [[ -f "$config_file" ]]; then
                if [[ -n "${2:-}" ]]; then
                    # Show specific key
                    grep "^${2}" "$config_file" || echo "Key '${2}' not found"
                else
                    # Show main configuration
                    grep -E '^(network\.|paths\.|nodename|distributed_cookie)' "$config_file"
                fi
            else
                echo "Configuration file not found: $config_file"
            fi
            ;;
        *)
            echo "Command '$1' not yet implemented."
            echo "Currently supported: status, show [key]"
            echo "For advanced configuration, use clique integration (in development)"
            ;;
    esac
}

# Execute main function with all arguments
main "$@"